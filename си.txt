
#include <stdio.h>		/* Заголовочный файл объявляет несколько целочисленных типов и макросов */
#include <stdint.h>		/* Заголовочный файл объявляет несколько целочисленных типов и макросов */

typedef struct{
    int32_t b;
    int32_t c;
}new_t;

new_t s;

// Инициализируем первичный массив с числами
int32_t array_original [] = {1, 1, 4, -2, -6, 0, 3, 2, 1, 3};

// Инициализируем указатель на результат (ответ). Начальное значение NULL
int32_t* array = NULL;
	
// Объявляем прототип функции, которая будет выполнять задание
int32_t* array_treatment (int32_t* array_ptr, size_t array_size);	
	
// Объявляем прототип функции, которая будет вычислять сумму элементов массива
int32_t array_sum (int32_t* array_ptr, size_t array_size);		

new_t les(int32_t* array_ptr, size_t array_size);

// Объявляем прототип функции, которая будет производить
// расчет среднего арифметического отрицательных элементов
int32_t avg_calc(int32_t* array_ptr, size_t array_size);

// Объявляем прототип функции, которая будет производить
// поиск минимального элемента массива
int32_t find_min(int32_t* array_ptr, size_t array_size);

// Прототип функции варианта
new_t var5(int32_t* array_ptr, size_t array_size);

//Экспортируем функцию из main.s написанную на ассемблере. 
/////вызвать наверное только var_5 роднулечку
extern int32_t var_5 (int32_t* array_ptr, size_t array_size, int32_t* new_array_ptr ); 
//extern int32_t array_sum_asm (int32_t* array_ptr, size_t array_size);
//extern int32_t find_min_func (int32_t* array_ptr, size_t array_size);

// Объявляем пустой массив для передачи его адреса в функцию array_treatment_asm
int32_t new_array_ptr [sizeof(array_original)/sizeof(int32_t)]= {0};
	
int main (void)
{
	s.b = 5;
    s.c = 10;
    
    // вывод через return 2 значения
    
    /*Вызываем функцию array_treatment. 
	Функция возвратит указатель на массив соответствующий заданию. 
	Размерность массива такая же как у оригинального массива.*/
	new_t a;
	a = les(array_original, sizeof(array_original)/sizeof(int32_t));
    
    //int32_t d;
   // int32_t array;
    
   // array = array_treatment(array_original, sizeof(array_original)/sizeof(int32_t));
     //array_treatment_asm(array_original, sizeof(array_original)/sizeof(int32_t), new_array);
	
	/*Вызываем функцию array_treatment_asm, тело которой описано в файле main_1.s. 
	Так как, в языке ассемблера не функций malloc() и вообще нет механизма выделения данных из кучи, 
	то мы заранее выделяем место в оперативной памяти для обработанного массива, 
	поэтому нам необходимо передать адрес нового массива в функцию. 
	Размерность массива такая же как у оригинального массива.*/
	
    var_5(array_original, sizeof(array_original)/sizeof(int32_t), new_array_ptr);
   
	while (1)
	{
	}
	return 0;
}

//******************************************************************************
// Функция для расчета среднего арифметического
// и поиска минимального элемента массива
new_t les(int32_t* array_ptr, size_t array_size)
{
    new_t v;
    v = var5(array_ptr, array_size);
    
    return v;
}

//*******Функция варианта 5*****************************************************
new_t var5(int32_t* array_ptr, size_t array_size)
{
    new_t b;
    b.b = avg_calc(array_ptr, array_size);
    b.c = find_min(array_ptr, array_size); 

    return b;
}

//********Расчет среднего арифметического отрицательных элементов***************
int32_t avg_calc(int32_t* array_ptr, size_t array_size)
{
    // masive - указатель на массив (адрес массива)
    // masive _size - размер массива
    int i; // i - элемент массива
    int sn, n, sredar;
    sn = 0;
    n = 0;
    sredar = 0;
    
    // Поиск отрицательного элемента массива
    for (i = 0; i < array_size; i++)
    {
        if (array_ptr[i] < 0)
        {
            n = n + 1;
            sn = sn + array_ptr[i];
        }
    }     
    // Среднее арифметическое
    sredar = sn / n;
    
    return sredar;
}

//**********Поиск минимального элемента массива*********************************
int32_t find_min(int32_t* array_ptr, size_t array_size)
{
    int i; // i - элемент массива
    int nm;
    nm = array_ptr[0]; // Титул наименьшего = нулевому элементу массива
    
    for (i = 0; i < array_size; i++)
    {
        if (array_ptr[i] < nm)
        {
            nm = array_ptr[i];
        }
    }
    
    return nm;
}
