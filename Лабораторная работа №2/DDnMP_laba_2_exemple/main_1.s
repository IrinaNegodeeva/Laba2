   AREA |.text|, CODE, READONLY

array_sum_asm	PROC	; Начало функции array_sum_asm
	EXPORT array_sum_asm
		; Функция (процедура) реализует суммирование массива 
		; Функция принимает указатель на массив через регистр R0
		; размер массива через регистр R1.
		; Результат работы функции возвращается через регистр R0
		; R0 = *array
		; R1 = size(array)
		; return R0= sum_array
	MOV R2, #0	; В регистре R2 будем хранить номер элемента массиа
	MOV R3, #0	; В регистре R3 будем хранить сумму элементов массиа
	MOV R4, #4 	; Размер одного элемента массива = 4 байтам, 
	MUL R1, R4	; поэтому умножаем кол-во элементов массива на 4.
sum
	CMP R2,R1	; Проверка R2 > R1
	BLT calc	; Если R2 < R1, переходим в "CALС"
	B exit		; Eсли R2 > R1, выходим из программы
calc	
	LDR R4, [R0,R2]	; Считать содержимое элемента массива со смещением в R2
	ADD R3,R3,R4	; R3 = R3 + R4
	ADD R2,#4
	B sum
exit
	MOV R0, R3
	BX LR
	ENDP	; Конец функции array_sum_asm


array_treatment_asm	PROC	; Начало функции array_treatment_asm
	EXPORT array_treatment_asm
		; Функция (процедура) реализует обработку массива в соответствии с заданием 
		; Функция принимает указатель на массив через регистр R0,
		; размер массива через регистр R1,
		; указатель на пустой массив через регистр R2
		; R0 = *array
		; R1 = size(array)
		; R2 = *new_array	
	MOV R3, #0	; В регистре R3 будем хранить номер элемента массиа
	MOV R4, #0	; В регистре R4 будем хранить сумму элементов массиа
	
	; Вызываем процедуру вычисления суммы массива
	PUSH {R0-R3, LR}	; записываем все необходимые регистры в стек, необходимые для процедуры array_treatment_asm
	; в регистрах R0 и R1 уже лежит необходимые данные для вычисления суммы
	BL array_sum_asm
	MOV R4, R0			; запись суммы массива в регистр R4
	POP {R0-R3, LR}		; возвращаем записанные ранее регистры из стека
		
	MOV R5, #4 	; Размер одного элемента массива = 4 байтам, 
	MUL R1, R5	; поэтому умножаем кол-во элементов массива на 4.

;При выполнении задачи происходит деление на ноль при заполнении первого элемента. 
;Поэтому мы запишем в нулевой элемент массива максимальное число типа int32_t = 2 147 483 647
	MOV R5, #2147483647
	STR R5, [R2,R3]

	ADD R3,#4 ; смещаем относительный адрес массива

treatment
	CMP R3,R1	; Проверка R3 > R1
	BLT treatment_calc	; Если R2 < R1, переходим в "CALС"
	B exit_treatment	; Eсли R2 > R1, выходим из программы
	
treatment_calc
	
	ASR R6, R3, #2
	SDIV R5, R4, R6
	STR R5, [R2,R3]
	ADD R3,#4 ; смещаем относительный адрес массива
	B treatment
	
exit_treatment
	BX LR	; Возвращаемся назад по адресу расположенному в регистре LR
	ENDP	; Конец функции array_treatment_asm

	END		; Конец файла